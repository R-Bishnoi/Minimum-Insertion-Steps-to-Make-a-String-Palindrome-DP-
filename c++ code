
// this problem is slide change in find the largest palindrom subsequence of string 
// no. of insertion  =   length of string - largest palindrom subsequence


//memoization


/*
class Solution {
public:
    
 int solve(string s1,string s2,vector<vector<int>>&dp,int i1,int i2){
    
    if(i1<0 || i2<0)return 0;
    
    if(dp[i1][i2]!=-1)return dp[i1][i2];
    
    
  if(s1[i1]==s2[i2]){
      return dp[i1][i2]=1+solve(s1,s2,dp,i1-1,i2-1);
  }  
    
  else{
      return dp[i1][i2]=max(solve(s1,s2,dp,i1-1,i2),solve(s1,s2,dp,i1,i2-1));
  }  
    
    
}
    
    
    
    
    
    int minInsertions(string s1) {
      
    int n=s1.size();
       
       string s2=s1;
       reverse(s2.begin(),s2.end());
       
      vector<vector<int>>dp(n,vector<int>(n+1,-1));
      
      int count= solve(s1,s2,dp,n-1,n-1);
      
      return n-count;    
             
        
    }
        
    
};

*/




//tabulation


class Solution {
public:

    int minInsertions(string s1) {
      
    string s2=s1;
        reverse(s2.begin(),s2.end());
        
    int n=s1.size();
       
       vector<vector<int>>dp(n+1,vector<int>(n+1,0));

    
   //base case shift index means index 0 is means i=-1
// so base case is
    for(int j=0;j<=n;j++)dp[0][j]=0;
    for(int i=0;i<=n;i++)dp[i][0]=0;
      
    
 for(int i=1;i<=n;i++){
     for(int j=1;j<=n;j++){
       
         if(s1[i-1]==s2[j-1])
      dp[i][j]=1+dp[i-1][j-1];
         
   
       else dp[i][j]=max(dp[i-1][j] ,dp[i][j-1]);
         
     }
 }
     
    
    
    
    return n-dp[n][n];
     
             
        
    }
        
    
};

